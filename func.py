# Создать функцию calc(a, b, operation). Описание входных параметров:
# 1. Первое число
# 2. Второе число
# 3. Действие над ними:
#    1) + Сложить
#    2) - Вычесть
#    3) * Умножить
#    4) / Разделить
#    5) В остальных случаях функция должна возвращать "Операция не поддерживается"

def calc(a,b, operation):
    if operation == '+':
        return a + b
    elif operation == '-':
        return a - b
    elif operation == '*':
        return a * b
    elif operation == '/':
        if b == 0:
            return 'На ноль делить нельзя'
        else:
            return a / b
    else:
        return "Операция не поддерживается"

# Проверяем корректные значения
print(calc(30, 15, '+'))
print(calc(30, 15, '-'))
print(calc(30, 15, '*'))
print(calc(30, 15, '/'))
# Проверяем проверку деления на ноль
print(calc(30, 0, '/'))
# Проверяем неподдерживаемую операцию
print(calc(30, 15, '%'))


# Напишите программу, которая будет выводить нечетные числа из списка и остановится, если встретит число 139
def dev(i):
    return i % 2 == 0
l = [1, 34, 78, 345, 111, 8, 5, 34, 9, 3, 139, 56, 2, 67, 69, 90]
def numbers(num):
    for i in num:
        if i == 139:
            break
        if not dev(i):
            print(i)

print(numbers(l))

#####################################################3

# Создайте список [ 18, 14, 10, 6, 2 ]  с помощью функции range()
list_range = []
for i in range(18, 1, -4):
    list_range.append(i)
print(list_range)

#########################################################

# Дан список lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20].
# Необходимо вывести элементы, которые одновременно 1) меньше 30 и 2) делятся на 3 без остатка.
# Все остальные элементы списка необходимо просуммировать и вывести конечный результат.

lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]
num = 0
for i in lst:
    if i < 30 and i % 3 == 0:
        print(i)
    else:
        num += i
print(num)

######################################################################
# Написать функцию month_to_season(), которая принимает 1 аргумент - номер месяца - и возвращает название сезона, к которому относится этот месяц.
# Например, передаем 2, на выходе получаем 'Зима'.

def month_to_season(arg):
    if 1 <= arg < 3 or arg == 12:
        return'зима'
    elif 3 <= arg < 6:
        return 'весна'
    elif 6 <= arg < 9:
        return 'лето'
    elif 9 <= arg < 12:
        return 'осень'

print(month_to_season(11))
#############################################################
#    WORK WITH STRING

# Дана следующая строка: ‘Сидел барсук в своей норе и ел картошечку пюре’
#
# 1. Создайте данную строку
text_string = 'Сидел барсук в своей норе и ел картошечку пюре'
# 2. Получите ее длину
print(len(text_string))
# 3. Проведите операцию сложения со строкой ‘.’
print(text_string + '.')
# 4. Проверьте, входит ли подстрока ‘ре’ в заданную строку
print('ре' in text_string)
# 5. Посчитайте количество вхождений подстроки ‘ре’
print(text_string.count('ре'))
# 6. Получите предпоследний символ строки
print(text_string[-1])
# 7. Получите все символы с нечетными индексами
print(text_string[1::2])
# 8. Определите, сколько слов в строке
print(text_string.count(' ') + 1)

###############################################################################
# Дана строка: ‘пишите код так, как будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.’
second_string = 'пишите код так, как будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.'
# 1. Начните строку с заглавной буквы, если она находится в нижнем регистре.
print(second_string.capitalize())
# 2. Найдите индекс вхождения подстроки ‘сопровождать’.
print(second_string.find('сопровождать'))
# 3. Замените вхождение подстроки ‘сопровождать’ на ‘поддерживать’.
print(second_string.replace('сопровождать', 'поддерживать'))
# 4. Разбейте предложение на части по запятым. Соедините части обратно, снова добавив запятые между частями.
new_list = second_string.split(',')
print(','.join(new_list))